TMO Preparation for MHz run
- Run Xiang's HitFinder


Integrating Detectors
https://confluence.slac.stanford.edu/pages/viewpage.action?pageId=314543421
1. Prepare two xtc2 files with these timestamps
data-r0001-s000-c000.xtc2: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
data-r0001-s001-c000.xtc2: 0 1 2 3       7        11 12 13 14
2. Add new parameter to DataSource (intg_det=det_name)
3. Must be part of DsParms (for passing around)
4. Smd0 checks this variable ('' or det_name). If det_name is found (must be unique)
4.1 identify stream no.
4.2 winning buffer
CURRENT SITUATION 
PS_SMD_N_EVENTS=10 (Skip Configure (0) and BeginRun (1))
data-r0001-s000-c000.xtc2: 0 1 2 3 4 5 6 7 8 9 10 11| 12 13 14
data-r0001-s001-c000.xtc2: 0 1 2 3       7     10 11| 12 13 14
data-r0001-s002-c000.xtc2: 0 1 2 3             10 11| 12 13 14
Smd0 sends chunks to EventBuilder (chunk size = 10)
2 11 for all stream files is a chunk

EventBuilder sends batches to BigData cores (batch_size=4)
2 5 to bd 0
6 9 to bd 1
...

WITH INTEGRATING DETECTOR
PS_SMD_N_EVENTS=2
data-r0001-s000-c000.xtc2: 0 1 2 3 4 5 6 7 8 9 10 | 11 12 13 14 15 16 | 17 18 19 20 21 | 22 23
data-r0001-s001-c000.xtc2: 0 1 2 3       7     10 |       13       16 |       19    21 | 22 23  (* intg det)
data-r0001-s002-c000.xtc2: 0 1 2 3             10 |                   |          20 21 | 22 23
Smd 0 sends a chunk to EB
0  10
11 16
17 21
22 23

EventBuilder
Option 1: Sends what is received from Smd0 to a BigData core 
0  10i to Bd0
11 16i to Bd1

BigData
for evt in run.events()
    hsd_diode += hsd.raw.value(evt)
    andor_img = andor.raw.img(evt)
    # ts=4,5,6->None
    # ts=7 ->array

SmdReader.view(batch_size=10)
winner = 2 
limit_ts = 


SmdReader.pyx (view)
i_starts (0 at get)
i_ends   (0 at get)
block_sizes
i_st_bufs
block_size_bufs
index                    : 0 1 2 3 4 5 6 7 8 8 10   11 12 13 14 15 16   17 18 19 20 21   22 23
data-r0001-s000-c000.xtc2: 0 1 2 3 4 5 6 7 8 9 10 | 11 12 13 14 15 16 | 17 18 19 20 21 | 22 23
data-r0001-s001-c000.xtc2: 0 1 2 3       7     10 |       13       16 |       19    21 | 22 23  (* intg det)
data-r0001-s002-c000.xtc2: 0 1 2 3             10 |                   |          20 21 | 22 23
value:                             0 1 2 3 4 5 6    7  8  9  10 11 12   13 14 15 16 
 


Live mode test
- Keep up with 1MHz rate data from daq here 
  /cds/data/drpsrcf/tst/tstx00417/xtc/ 


Spinifel-psana2-legion
Thursday or Friday
- Reduce problem
    1) Make a simple Reduce example with psana2 loop interface
    and CONVERGENCE (global) idea.
    2) Put in fake Steps determined by smd0.  
    Option: env var PS_N_FAKESTEP_SIZE=10000
- Option 4 External buffer: 
    Use srv callback as spinifel's computation work
From Seema
- Callback tested. (Need to do testing for mpi) More callbacks needed there (BeginRun, BeginStep, EndStep, EndRun, Event,  smalldata, Filter, Destination)
- CI with both Jenkins and GH Action


Dgrampy (for 2023 epixhr)
- Check mem leak for ex-03-duplicate-data.py
- Unifying PyDgram and psana.dgram.Dgram
- Rule for generating NamesId is the lowest from the range available 
e.g. 0,1,2,...,255 
next NamesId is 3
see ~/psana-nersc/psana2/dgrampy/ex-02-zmq-drp-pull.py for more TODO note


To solve EnvStore prolem on Eb
[Add EnvStore to EvenBuilder nodes]
Filter callback can take loops
[ds.run_this_filer(filter_fn)]

def filter_fn(ds): # EventBuilder cores
    # Any avai. types of loop as on BD cores

Option #1
def filter2(): # This works on smalldata
  ds = DataSource() # New datasource 
  for run ...
    for evt ... (smd events)

Option #2
def filter2(ds):
    for run in ds.runs():
       for evt >>>


# main on bd
ds = DataSource() # This works on bigdata
for run ...
  for evt ..  (bd events)


