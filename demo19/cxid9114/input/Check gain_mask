{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pickle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Populating the interactive namespace from numpy and matplotlib\n"
     ]
    }
   ],
   "source": [
    "%pylab inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Untitled.ipynb\t\t  geom_ld91.json    process_batch.phil\n",
      "convert_pickle_py2to3.py  mask_ld91.pickle\n",
      "gain_mask.pickle\t  metro.pickle\n"
     ]
    }
   ],
   "source": [
    "!ls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open(\"gain_mask.pickle\", \"rb\") as f:\n",
    "    gain_mask = pickle.load(f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[1.  , 1.  , 1.  , ..., 1.  , 1.  , 1.  ],\n",
       "        [1.  , 1.  , 1.  , ..., 1.  , 1.  , 1.  ],\n",
       "        [1.  , 1.  , 1.  , ..., 1.  , 1.  , 1.  ],\n",
       "        ...,\n",
       "        [6.85, 6.85, 6.85, ..., 1.  , 1.  , 1.  ],\n",
       "        [6.85, 6.85, 6.85, ..., 1.  , 1.  , 1.  ],\n",
       "        [6.85, 6.85, 6.85, ..., 1.  , 1.  , 1.  ]],\n",
       "\n",
       "       [[6.85, 6.85, 6.85, ..., 1.  , 1.  , 1.  ],\n",
       "        [6.85, 6.85, 6.85, ..., 1.  , 1.  , 1.  ],\n",
       "        [6.85, 6.85, 6.85, ..., 1.  , 1.  , 1.  ],\n",
       "        ...,\n",
       "        [6.85, 6.85, 6.85, ..., 6.85, 6.85, 6.85],\n",
       "        [6.85, 6.85, 6.85, ..., 6.85, 6.85, 6.85],\n",
       "        [6.85, 6.85, 6.85, ..., 6.85, 6.85, 6.85]],\n",
       "\n",
       "       [[1.  , 1.  , 1.  , ..., 1.  , 1.  , 1.  ],\n",
       "        [1.  , 1.  , 1.  , ..., 1.  , 1.  , 1.  ],\n",
       "        [1.  , 1.  , 1.  , ..., 1.  , 1.  , 1.  ],\n",
       "        ...,\n",
       "        [1.  , 1.  , 1.  , ..., 1.  , 1.  , 1.  ],\n",
       "        [1.  , 1.  , 1.  , ..., 1.  , 1.  , 1.  ],\n",
       "        [1.  , 1.  , 1.  , ..., 1.  , 1.  , 1.  ]],\n",
       "\n",
       "       ...,\n",
       "\n",
       "       [[1.  , 1.  , 1.  , ..., 1.  , 1.  , 1.  ],\n",
       "        [1.  , 1.  , 1.  , ..., 1.  , 1.  , 1.  ],\n",
       "        [1.  , 1.  , 1.  , ..., 1.  , 1.  , 1.  ],\n",
       "        ...,\n",
       "        [1.  , 1.  , 1.  , ..., 1.  , 1.  , 1.  ],\n",
       "        [1.  , 1.  , 1.  , ..., 1.  , 1.  , 1.  ],\n",
       "        [1.  , 1.  , 1.  , ..., 1.  , 1.  , 1.  ]],\n",
       "\n",
       "       [[1.  , 1.  , 1.  , ..., 1.  , 1.  , 1.  ],\n",
       "        [1.  , 1.  , 1.  , ..., 1.  , 1.  , 1.  ],\n",
       "        [1.  , 1.  , 1.  , ..., 1.  , 1.  , 1.  ],\n",
       "        ...,\n",
       "        [1.  , 1.  , 1.  , ..., 1.  , 1.  , 1.  ],\n",
       "        [1.  , 1.  , 1.  , ..., 1.  , 1.  , 1.  ],\n",
       "        [1.  , 1.  , 1.  , ..., 1.  , 1.  , 1.  ]],\n",
       "\n",
       "       [[1.  , 1.  , 1.  , ..., 1.  , 1.  , 1.  ],\n",
       "        [1.  , 1.  , 1.  , ..., 1.  , 1.  , 1.  ],\n",
       "        [1.  , 1.  , 1.  , ..., 1.  , 1.  , 1.  ],\n",
       "        ...,\n",
       "        [1.  , 1.  , 1.  , ..., 6.85, 6.85, 6.85],\n",
       "        [1.  , 1.  , 1.  , ..., 6.85, 6.85, 6.85],\n",
       "        [1.  , 1.  , 1.  , ..., 6.85, 6.85, 6.85]]])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gain_mask"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.colorbar.Colorbar at 0x11a7513d0>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 604.022x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "matshow(gain_mask[0, :, :]); colorbar()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_gain_mask = np.zeros_like(gain_mask)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_gain_mask[gain_mask>1] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.colorbar.Colorbar at 0x11a8e56d0>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 604.022x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "matshow(new_gain_mask[0, :, :]); colorbar()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        ...,\n",
       "        [1., 1., 1., ..., 0., 0., 0.],\n",
       "        [1., 1., 1., ..., 0., 0., 0.],\n",
       "        [1., 1., 1., ..., 0., 0., 0.]],\n",
       "\n",
       "       [[1., 1., 1., ..., 0., 0., 0.],\n",
       "        [1., 1., 1., ..., 0., 0., 0.],\n",
       "        [1., 1., 1., ..., 0., 0., 0.],\n",
       "        ...,\n",
       "        [1., 1., 1., ..., 1., 1., 1.],\n",
       "        [1., 1., 1., ..., 1., 1., 1.],\n",
       "        [1., 1., 1., ..., 1., 1., 1.]],\n",
       "\n",
       "       [[0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        ...,\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.]],\n",
       "\n",
       "       ...,\n",
       "\n",
       "       [[0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        ...,\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.]],\n",
       "\n",
       "       [[0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        ...,\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.]],\n",
       "\n",
       "       [[0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        ...,\n",
       "        [0., 0., 0., ..., 1., 1., 1.],\n",
       "        [0., 0., 0., ..., 1., 1., 1.],\n",
       "        [0., 0., 0., ..., 1., 1., 1.]]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_gain_mask"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
